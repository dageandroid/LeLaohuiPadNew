package dq.lovemusic.thinkpad.lelaohuidatabaselibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import dq.lovemusic.thinkpad.lelaohuidatabaselibrary.bean.FootCateBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOT_CATE_BEAN".
*/
public class FootCateBeanDao extends AbstractDao<FootCateBean, Long> {

    public static final String TABLENAME = "FOOT_CATE_BEAN";

    /**
     * Properties of entity FootCateBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CateId = new Property(0, Long.class, "cateId", false, "CATE_ID");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property UnineqKey = new Property(2, String.class, "unineqKey", false, "UNINEQ_KEY");
        public final static Property CateName = new Property(3, String.class, "cateName", false, "CATE_NAME");
        public final static Property MealTime = new Property(4, String.class, "mealTime", false, "MEAL_TIME");
        public final static Property MealType = new Property(5, String.class, "mealType", false, "MEAL_TYPE");
    }


    public FootCateBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FootCateBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOT_CATE_BEAN\" (" + //
                "\"CATE_ID\" INTEGER," + // 0: cateId
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: id
                "\"UNINEQ_KEY\" TEXT UNIQUE ," + // 2: unineqKey
                "\"CATE_NAME\" TEXT," + // 3: cateName
                "\"MEAL_TIME\" TEXT," + // 4: mealTime
                "\"MEAL_TYPE\" TEXT);"); // 5: mealType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOT_CATE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FootCateBean entity) {
        stmt.clearBindings();
 
        Long cateId = entity.getCateId();
        if (cateId != null) {
            stmt.bindLong(1, cateId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String unineqKey = entity.getUnineqKey();
        if (unineqKey != null) {
            stmt.bindString(3, unineqKey);
        }
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(4, cateName);
        }
 
        String mealTime = entity.getMealTime();
        if (mealTime != null) {
            stmt.bindString(5, mealTime);
        }
 
        String mealType = entity.getMealType();
        if (mealType != null) {
            stmt.bindString(6, mealType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FootCateBean entity) {
        stmt.clearBindings();
 
        Long cateId = entity.getCateId();
        if (cateId != null) {
            stmt.bindLong(1, cateId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String unineqKey = entity.getUnineqKey();
        if (unineqKey != null) {
            stmt.bindString(3, unineqKey);
        }
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(4, cateName);
        }
 
        String mealTime = entity.getMealTime();
        if (mealTime != null) {
            stmt.bindString(5, mealTime);
        }
 
        String mealType = entity.getMealType();
        if (mealType != null) {
            stmt.bindString(6, mealType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public FootCateBean readEntity(Cursor cursor, int offset) {
        FootCateBean entity = new FootCateBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cateId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // unineqKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cateName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mealTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mealType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FootCateBean entity, int offset) {
        entity.setCateId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUnineqKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCateName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMealTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMealType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FootCateBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FootCateBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FootCateBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
