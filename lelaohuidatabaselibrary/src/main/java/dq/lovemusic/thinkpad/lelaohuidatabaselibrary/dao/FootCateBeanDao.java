package dq.lovemusic.thinkpad.lelaohuidatabaselibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import dq.lovemusic.thinkpad.lelaohuidatabaselibrary.bean.FootCateBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOT_CATE_BEAN".
*/
public class FootCateBeanDao extends AbstractDao<FootCateBean, Integer> {

    public static final String TABLENAME = "FOOT_CATE_BEAN";

    /**
     * Properties of entity FootCateBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CateId = new Property(0, int.class, "cateId", true, "_id");
        public final static Property CateName = new Property(1, String.class, "cateName", false, "CATE_NAME");
        public final static Property MealTime = new Property(2, String.class, "mealTime", false, "MEAL_TIME");
        public final static Property MealType = new Property(3, String.class, "mealType", false, "MEAL_TYPE");
    }


    public FootCateBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FootCateBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOT_CATE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: cateId
                "\"CATE_NAME\" TEXT," + // 1: cateName
                "\"MEAL_TIME\" TEXT," + // 2: mealTime
                "\"MEAL_TYPE\" TEXT);"); // 3: mealType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOT_CATE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FootCateBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCateId());
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(2, cateName);
        }
 
        String mealTime = entity.getMealTime();
        if (mealTime != null) {
            stmt.bindString(3, mealTime);
        }
 
        String mealType = entity.getMealType();
        if (mealType != null) {
            stmt.bindString(4, mealType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FootCateBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCateId());
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(2, cateName);
        }
 
        String mealTime = entity.getMealTime();
        if (mealTime != null) {
            stmt.bindString(3, mealTime);
        }
 
        String mealType = entity.getMealType();
        if (mealType != null) {
            stmt.bindString(4, mealType);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public FootCateBean readEntity(Cursor cursor, int offset) {
        FootCateBean entity = new FootCateBean( //
            cursor.getInt(offset + 0), // cateId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cateName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mealTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // mealType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FootCateBean entity, int offset) {
        entity.setCateId(cursor.getInt(offset + 0));
        entity.setCateName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMealTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMealType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(FootCateBean entity, long rowId) {
        return entity.getCateId();
    }
    
    @Override
    public Integer getKey(FootCateBean entity) {
        if(entity != null) {
            return entity.getCateId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FootCateBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
