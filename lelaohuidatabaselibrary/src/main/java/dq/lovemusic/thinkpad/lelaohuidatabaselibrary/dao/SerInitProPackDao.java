package dq.lovemusic.thinkpad.lelaohuidatabaselibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import dq.lovemusic.thinkpad.lelaohuidatabaselibrary.bean.SerInitProPack;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SER_INIT_PRO_PACK".
*/
public class SerInitProPackDao extends AbstractDao<SerInitProPack, Long> {

    public static final String TABLENAME = "SER_INIT_PRO_PACK";

    /**
     * Properties of entity SerInitProPack.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackId = new Property(1, int.class, "packId", false, "PACK_ID");
        public final static Property PackName = new Property(2, String.class, "packName", false, "PACK_NAME");
        public final static Property OrgName = new Property(3, String.class, "orgName", false, "ORG_NAME");
        public final static Property OrgTypeId = new Property(4, int.class, "orgTypeId", false, "ORG_TYPE_ID");
        public final static Property OrgId = new Property(5, int.class, "orgId", false, "ORG_ID");
        public final static Property ServiceCateId = new Property(6, int.class, "serviceCateId", false, "SERVICE_CATE_ID");
        public final static Property IsPro = new Property(7, int.class, "isPro", false, "IS_PRO");
        public final static Property PictureUrl = new Property(8, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property Reamark = new Property(9, String.class, "reamark", false, "REAMARK");
        public final static Property SaleNums = new Property(10, int.class, "saleNums", false, "SALE_NUMS");
        public final static Property Price = new Property(11, int.class, "price", false, "PRICE");
        public final static Property BuyNum = new Property(12, int.class, "serNum", false, "BUY_NUM");

    }

    private DaoSession daoSession;


    public SerInitProPackDao(DaoConfig config) {
        super(config);
    }
    
    public SerInitProPackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SER_INIT_PRO_PACK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PACK_ID\" INTEGER NOT NULL ," + // 1: packId
                "\"PACK_NAME\" TEXT," + // 2: packName
                "\"ORG_NAME\" TEXT," + // 3: orgName
                "\"ORG_TYPE_ID\" INTEGER NOT NULL ," + // 4: orgTypeId
                "\"ORG_ID\" INTEGER NOT NULL ," + // 5: orgId
                "\"SERVICE_CATE_ID\" INTEGER NOT NULL ," + // 6: serviceCateId
                "\"IS_PRO\" INTEGER NOT NULL ," + // 7: isPro
                "\"PICTURE_URL\" TEXT," + // 8: pictureUrl
                "\"REAMARK\" TEXT," + // 9: reamark
                "\"SALE_NUMS\" INTEGER NOT NULL ," + // 10: saleNums
                "\"PRICE\" INTEGER NOT NULL ,"+// 11: price
                "\"BUY_NUM\" INTEGER NOT NULL);"); //serNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SER_INIT_PRO_PACK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SerInitProPack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPackId());
 
        String packName = entity.getPackageName();
        if (packName != null) {
            stmt.bindString(3, packName);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(4, orgName);
        }
        stmt.bindLong(5, entity.getOrgTypeId());
        stmt.bindLong(6, entity.getOrgId());
        stmt.bindLong(7, entity.getServiceCateId());
        stmt.bindLong(8, entity.getIsPro());
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(9, pictureUrl);
        }
 
        String reamark = entity.getReamark();
        if (reamark != null) {
            stmt.bindString(10, reamark);
        }
        stmt.bindLong(11, entity.getSaleNums());
        stmt.bindLong(12, entity.getPrice());
        stmt.bindLong(13, entity.getSerNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SerInitProPack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPackId());
 
        String packName = entity.getPackageName();
        if (packName != null) {
            stmt.bindString(3, packName);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(4, orgName);
        }
        stmt.bindLong(5, entity.getOrgTypeId());
        stmt.bindLong(6, entity.getOrgId());
        stmt.bindLong(7, entity.getServiceCateId());
        stmt.bindLong(8, entity.getIsPro());
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(9, pictureUrl);
        }
 
        String reamark = entity.getReamark();
        if (reamark != null) {
            stmt.bindString(10, reamark);
        }
        stmt.bindLong(11, entity.getSaleNums());
        stmt.bindLong(12, entity.getPrice());
        stmt.bindLong(13, entity.getSerNum());
    }

    @Override
    protected final void attachEntity(SerInitProPack entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SerInitProPack readEntity(Cursor cursor, int offset) {
        SerInitProPack entity = new SerInitProPack( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // packId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orgName
            cursor.getInt(offset + 4), // orgTypeId
            cursor.getInt(offset + 5), // orgId
            cursor.getInt(offset + 6), // serviceCateId
            cursor.getInt(offset + 7), // isPro
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pictureUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // reamark
            cursor.getInt(offset + 10), // saleNums
            cursor.getInt(offset + 11), // price
            cursor.getInt(offset + 12) // serNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SerInitProPack entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackId(cursor.getInt(offset + 1));
        entity.setPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrgName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrgTypeId(cursor.getInt(offset + 4));
        entity.setOrgId(cursor.getInt(offset + 5));
        entity.setServiceCateId(cursor.getInt(offset + 6));
        entity.setIsPro(cursor.getInt(offset + 7));
        entity.setPictureUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReamark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSaleNums(cursor.getInt(offset + 10));
        entity.setPrice(cursor.getInt(offset + 11));
        entity.setSerNum(cursor.getInt(offset+12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SerInitProPack entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SerInitProPack entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SerInitProPack entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
