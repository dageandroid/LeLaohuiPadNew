package dq.lovemusic.thinkpad.lelaohuidatabaselibrary.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import dq.lovemusic.thinkpad.lelaohuidatabaselibrary.bean.SerInitProPackDetailListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SER_INIT_PRO_PACK_DETAIL_LIST_BEAN".
*/
public class SerInitProPackDetailListBeanDao extends AbstractDao<SerInitProPackDetailListBean, Long> {

    public static final String TABLENAME = "SER_INIT_PRO_PACK_DETAIL_LIST_BEAN";

    /**
     * Properties of entity SerInitProPackDetailListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PackDetailId = new Property(0, int.class, "packDetailId", false, "PACK_DETAIL_ID");
        public final static Property PackId = new Property(1, int.class, "packId", false, "PACK_ID");
        public final static Property ServiceId = new Property(2, String.class, "serviceId", false, "SERVICE_ID");
        public final static Property ServiceName = new Property(3, String.class, "serviceName", false, "SERVICE_NAME");
        public final static Property PictureUrl = new Property(4, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property OrgTypeId = new Property(5, int.class, "orgTypeId", false, "ORG_TYPE_ID");
        public final static Property OrgId = new Property(6, int.class, "orgId", false, "ORG_ID");
        public final static Property Id = new Property(7, Long.class, "id", true, "_id");
    }

    private Query<SerInitProPackDetailListBean> serInitProPack_SerInitProPackDetailListQuery;

    public SerInitProPackDetailListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SerInitProPackDetailListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SER_INIT_PRO_PACK_DETAIL_LIST_BEAN\" (" + //
                "\"PACK_DETAIL_ID\" INTEGER NOT NULL ," + // 0: packDetailId
                "\"PACK_ID\" INTEGER NOT NULL ," + // 1: packId
                "\"SERVICE_ID\" TEXT," + // 2: serviceId
                "\"SERVICE_NAME\" TEXT," + // 3: serviceName
                "\"PICTURE_URL\" TEXT," + // 4: pictureUrl
                "\"ORG_TYPE_ID\" INTEGER NOT NULL ," + // 5: orgTypeId
                "\"ORG_ID\" INTEGER NOT NULL ," + // 6: orgId
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 7: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SER_INIT_PRO_PACK_DETAIL_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SerInitProPackDetailListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPackDetailId());
        stmt.bindLong(2, entity.getPackId());
 
        String serviceId = entity.getServiceId();
        if (serviceId != null) {
            stmt.bindString(3, serviceId);
        }
 
        String serviceName = entity.getServiceName();
        if (serviceName != null) {
            stmt.bindString(4, serviceName);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(5, pictureUrl);
        }
        stmt.bindLong(6, entity.getOrgTypeId());
        stmt.bindLong(7, entity.getOrgId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(8, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SerInitProPackDetailListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPackDetailId());
        stmt.bindLong(2, entity.getPackId());
 
        String serviceId = entity.getServiceId();
        if (serviceId != null) {
            stmt.bindString(3, serviceId);
        }
 
        String serviceName = entity.getServiceName();
        if (serviceName != null) {
            stmt.bindString(4, serviceName);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(5, pictureUrl);
        }
        stmt.bindLong(6, entity.getOrgTypeId());
        stmt.bindLong(7, entity.getOrgId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(8, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7);
    }    

    @Override
    public SerInitProPackDetailListBean readEntity(Cursor cursor, int offset) {
        SerInitProPackDetailListBean entity = new SerInitProPackDetailListBean( //
            cursor.getInt(offset + 0), // packDetailId
            cursor.getInt(offset + 1), // packId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serviceName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pictureUrl
            cursor.getInt(offset + 5), // orgTypeId
            cursor.getInt(offset + 6), // orgId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SerInitProPackDetailListBean entity, int offset) {
        entity.setPackDetailId(cursor.getInt(offset + 0));
        entity.setPackId(cursor.getInt(offset + 1));
        entity.setServiceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServiceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPictureUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrgTypeId(cursor.getInt(offset + 5));
        entity.setOrgId(cursor.getInt(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SerInitProPackDetailListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SerInitProPackDetailListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SerInitProPackDetailListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "serInitProPackDetailList" to-many relationship of SerInitProPack. */
    public List<SerInitProPackDetailListBean> _querySerInitProPack_SerInitProPackDetailList(int packId, int orgId, int orgTypeId) {
        synchronized (this) {
            if (serInitProPack_SerInitProPackDetailListQuery == null) {
                QueryBuilder<SerInitProPackDetailListBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PackId.eq(null));
                queryBuilder.where(Properties.OrgId.eq(null));
                queryBuilder.where(Properties.OrgTypeId.eq(null));
                serInitProPack_SerInitProPackDetailListQuery = queryBuilder.build();
            }
        }
        Query<SerInitProPackDetailListBean> query = serInitProPack_SerInitProPackDetailListQuery.forCurrentThread();
        query.setParameter(0, packId);
        query.setParameter(1, orgId);
        query.setParameter(2, orgTypeId);
        return query.list();
    }

}
