package dq.lovemusic.thinkpad.lelaohuidatabaselibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import dq.lovemusic.thinkpad.lelaohuidatabaselibrary.bean.ProCateService;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRO_CATE_SERVICE".
*/
public class ProCateServiceDao extends AbstractDao<ProCateService, Void> {

    public static final String TABLENAME = "PRO_CATE_SERVICE";

    /**
     * Properties of entity ProCateService.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CateId = new Property(0, long.class, "cateId", false, "CATE_ID");
        public final static Property CateName = new Property(1, String.class, "cateName", false, "CATE_NAME");
        public final static Property CateLevel = new Property(2, int.class, "cateLevel", false, "CATE_LEVEL");
        public final static Property ParentId = new Property(3, long.class, "parentId", false, "PARENT_ID");
        public final static Property IsLeaf = new Property(4, int.class, "isLeaf", false, "IS_LEAF");
        public final static Property IsDelete = new Property(5, int.class, "isDelete", false, "IS_DELETE");
        public final static Property ManagerId = new Property(6, String.class, "managerId", false, "MANAGER_ID");
        public final static Property ManagerName = new Property(7, String.class, "managerName", false, "MANAGER_NAME");
        public final static Property OrgId = new Property(8, long.class, "orgId", false, "ORG_ID");
        public final static Property OrgName = new Property(9, String.class, "orgName", false, "ORG_NAME");
        public final static Property OrgTypeId = new Property(10, int.class, "orgTypeId", false, "ORG_TYPE_ID");
        public final static Property AddTime = new Property(11, java.util.Date.class, "addTime", false, "ADD_TIME");
        public final static Property UpdTime = new Property(12, java.util.Date.class, "updTime", false, "UPD_TIME");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property Status = new Property(14, int.class, "status", false, "STATUS");
        public final static Property PinYin = new Property(15, String.class, "pinYin", false, "PIN_YIN");
        public final static Property PY = new Property(16, String.class, "pY", false, "P_Y");
        public final static Property IsPack = new Property(17, int.class, "isPack", false, "IS_PACK");
        public final static Property PackorgId = new Property(18, Long.class, "packorgId", false, "PACKORG_ID");
        public final static Property PackorgTypeId = new Property(19, Integer.class, "packorgTypeId", false, "PACKORG_TYPE_ID");
        public final static Property IsEmptyShow = new Property(20, Integer.class, "isEmptyShow", false, "IS_EMPTY_SHOW");
        public final static Property PackStatus = new Property(21, Integer.class, "packStatus", false, "PACK_STATUS");
        public final static Property PacksupplierId = new Property(22, Long.class, "packsupplierId", false, "PACKSUPPLIER_ID");
        public final static Property PacksupplierTypeId = new Property(23, Integer.class, "packsupplierTypeId", false, "PACKSUPPLIER_TYPE_ID");
        public final static Property PictureName = new Property(24, String.class, "pictureName", false, "PICTURE_NAME");
        public final static Property PictureUrl = new Property(25, String.class, "pictureUrl", false, "PICTURE_URL");
    }


    public ProCateServiceDao(DaoConfig config) {
        super(config);
    }
    
    public ProCateServiceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRO_CATE_SERVICE\" (" + //
                "\"CATE_ID\" INTEGER NOT NULL ," + // 0: cateId
                "\"CATE_NAME\" TEXT," + // 1: cateName
                "\"CATE_LEVEL\" INTEGER NOT NULL ," + // 2: cateLevel
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 3: parentId
                "\"IS_LEAF\" INTEGER NOT NULL ," + // 4: isLeaf
                "\"IS_DELETE\" INTEGER NOT NULL ," + // 5: isDelete
                "\"MANAGER_ID\" TEXT," + // 6: managerId
                "\"MANAGER_NAME\" TEXT," + // 7: managerName
                "\"ORG_ID\" INTEGER NOT NULL ," + // 8: orgId
                "\"ORG_NAME\" TEXT," + // 9: orgName
                "\"ORG_TYPE_ID\" INTEGER NOT NULL ," + // 10: orgTypeId
                "\"ADD_TIME\" INTEGER," + // 11: addTime
                "\"UPD_TIME\" INTEGER," + // 12: updTime
                "\"REMARK\" TEXT," + // 13: remark
                "\"STATUS\" INTEGER NOT NULL ," + // 14: status
                "\"PIN_YIN\" TEXT," + // 15: pinYin
                "\"P_Y\" TEXT," + // 16: pY
                "\"IS_PACK\" INTEGER NOT NULL ," + // 17: isPack
                "\"PACKORG_ID\" INTEGER," + // 18: packorgId
                "\"PACKORG_TYPE_ID\" INTEGER," + // 19: packorgTypeId
                "\"IS_EMPTY_SHOW\" INTEGER," + // 20: isEmptyShow
                "\"PACK_STATUS\" INTEGER," + // 21: packStatus
                "\"PACKSUPPLIER_ID\" INTEGER," + // 22: packsupplierId
                "\"PACKSUPPLIER_TYPE_ID\" INTEGER," + // 23: packsupplierTypeId
                "\"PICTURE_NAME\" TEXT," + // 24: pictureName
                "\"PICTURE_URL\" TEXT);"); // 25: pictureUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRO_CATE_SERVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProCateService entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCateId());
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(2, cateName);
        }
        stmt.bindLong(3, entity.getCateLevel());
        stmt.bindLong(4, entity.getParentId());
        stmt.bindLong(5, entity.getIsLeaf());
        stmt.bindLong(6, entity.getIsDelete());
 
        String managerId = entity.getManagerId();
        if (managerId != null) {
            stmt.bindString(7, managerId);
        }
 
        String managerName = entity.getManagerName();
        if (managerName != null) {
            stmt.bindString(8, managerName);
        }
        stmt.bindLong(9, entity.getOrgId());
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(10, orgName);
        }
        stmt.bindLong(11, entity.getOrgTypeId());
 
        java.util.Date addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(12, addTime.getTime());
        }
 
        java.util.Date updTime = entity.getUpdTime();
        if (updTime != null) {
            stmt.bindLong(13, updTime.getTime());
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
        stmt.bindLong(15, entity.getStatus());
 
        String pinYin = entity.getPinYin();
        if (pinYin != null) {
            stmt.bindString(16, pinYin);
        }
 
        String pY = entity.getPY();
        if (pY != null) {
            stmt.bindString(17, pY);
        }
        stmt.bindLong(18, entity.getIsPack());
 
        Long packorgId = entity.getPackorgId();
        if (packorgId != null) {
            stmt.bindLong(19, packorgId);
        }
 
        Integer packorgTypeId = entity.getPackorgTypeId();
        if (packorgTypeId != null) {
            stmt.bindLong(20, packorgTypeId);
        }
 
        Integer isEmptyShow = entity.getIsEmptyShow();
        if (isEmptyShow != null) {
            stmt.bindLong(21, isEmptyShow);
        }
 
        Integer packStatus = entity.getPackStatus();
        if (packStatus != null) {
            stmt.bindLong(22, packStatus);
        }
 
        Long packsupplierId = entity.getPacksupplierId();
        if (packsupplierId != null) {
            stmt.bindLong(23, packsupplierId);
        }
 
        Integer packsupplierTypeId = entity.getPacksupplierTypeId();
        if (packsupplierTypeId != null) {
            stmt.bindLong(24, packsupplierTypeId);
        }
 
        String pictureName = entity.getPictureName();
        if (pictureName != null) {
            stmt.bindString(25, pictureName);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(26, pictureUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProCateService entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCateId());
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(2, cateName);
        }
        stmt.bindLong(3, entity.getCateLevel());
        stmt.bindLong(4, entity.getParentId());
        stmt.bindLong(5, entity.getIsLeaf());
        stmt.bindLong(6, entity.getIsDelete());
 
        String managerId = entity.getManagerId();
        if (managerId != null) {
            stmt.bindString(7, managerId);
        }
 
        String managerName = entity.getManagerName();
        if (managerName != null) {
            stmt.bindString(8, managerName);
        }
        stmt.bindLong(9, entity.getOrgId());
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(10, orgName);
        }
        stmt.bindLong(11, entity.getOrgTypeId());
 
        java.util.Date addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(12, addTime.getTime());
        }
 
        java.util.Date updTime = entity.getUpdTime();
        if (updTime != null) {
            stmt.bindLong(13, updTime.getTime());
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
        stmt.bindLong(15, entity.getStatus());
 
        String pinYin = entity.getPinYin();
        if (pinYin != null) {
            stmt.bindString(16, pinYin);
        }
 
        String pY = entity.getPY();
        if (pY != null) {
            stmt.bindString(17, pY);
        }
        stmt.bindLong(18, entity.getIsPack());
 
        Long packorgId = entity.getPackorgId();
        if (packorgId != null) {
            stmt.bindLong(19, packorgId);
        }
 
        Integer packorgTypeId = entity.getPackorgTypeId();
        if (packorgTypeId != null) {
            stmt.bindLong(20, packorgTypeId);
        }
 
        Integer isEmptyShow = entity.getIsEmptyShow();
        if (isEmptyShow != null) {
            stmt.bindLong(21, isEmptyShow);
        }
 
        Integer packStatus = entity.getPackStatus();
        if (packStatus != null) {
            stmt.bindLong(22, packStatus);
        }
 
        Long packsupplierId = entity.getPacksupplierId();
        if (packsupplierId != null) {
            stmt.bindLong(23, packsupplierId);
        }
 
        Integer packsupplierTypeId = entity.getPacksupplierTypeId();
        if (packsupplierTypeId != null) {
            stmt.bindLong(24, packsupplierTypeId);
        }
 
        String pictureName = entity.getPictureName();
        if (pictureName != null) {
            stmt.bindString(25, pictureName);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(26, pictureUrl);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ProCateService readEntity(Cursor cursor, int offset) {
        ProCateService entity = new ProCateService( //
            cursor.getLong(offset + 0), // cateId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cateName
            cursor.getInt(offset + 2), // cateLevel
            cursor.getLong(offset + 3), // parentId
            cursor.getInt(offset + 4), // isLeaf
            cursor.getInt(offset + 5), // isDelete
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // managerId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // managerName
            cursor.getLong(offset + 8), // orgId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // orgName
            cursor.getInt(offset + 10), // orgTypeId
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // addTime
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // updTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.getInt(offset + 14), // status
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pinYin
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // pY
            cursor.getInt(offset + 17), // isPack
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // packorgId
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // packorgTypeId
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // isEmptyShow
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // packStatus
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // packsupplierId
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // packsupplierTypeId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // pictureName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // pictureUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProCateService entity, int offset) {
        entity.setCateId(cursor.getLong(offset + 0));
        entity.setCateName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCateLevel(cursor.getInt(offset + 2));
        entity.setParentId(cursor.getLong(offset + 3));
        entity.setIsLeaf(cursor.getInt(offset + 4));
        entity.setIsDelete(cursor.getInt(offset + 5));
        entity.setManagerId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setManagerName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrgId(cursor.getLong(offset + 8));
        entity.setOrgName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrgTypeId(cursor.getInt(offset + 10));
        entity.setAddTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setUpdTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStatus(cursor.getInt(offset + 14));
        entity.setPinYin(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPY(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsPack(cursor.getInt(offset + 17));
        entity.setPackorgId(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setPackorgTypeId(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setIsEmptyShow(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setPackStatus(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setPacksupplierId(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setPacksupplierTypeId(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setPictureName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPictureUrl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ProCateService entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ProCateService entity) {
        return null;
    }

    @Override
    public boolean hasKey(ProCateService entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
